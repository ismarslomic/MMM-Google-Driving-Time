/*! *****************************************************************************
  mmm-google-driving-time
  Version 1.0.0

  Get info from Google when to start driving based on shortest duration, for the MagicMirrorÂ² platform.
  Please submit bugs at https://github.com/ismarslomic/MMM-Google-Driving-Time/issues

  (c) ismar@slomic.no
  Licence: MIT

  This file is auto-generated. Do not edit.
***************************************************************************** */

!function(t){"use strict";function e(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(i){if("default"!==i){var n=Object.getOwnPropertyDescriptor(t,i);Object.defineProperty(e,i,n.get?n:{enumerable:!0,get:function(){return t[i]}})}})),e.default=t,Object.freeze(e)}var i,n=e(t);!function(t){t.JAST_STOCKS_REQUEST="JAST_STOCKS_REQUEST",t.JAST_STOCKS_RESPONSE="JAST_STOCKS_RESPONSE"}(i||(i={})),Module.register("MMM-Google-Driving-Time",{defaults:{lastUpdateFormat:"HH:mm",updateIntervalInSeconds:5,origin:void 0,destination:void 0,language:void 0,trafficMode:"best_guess",apiKey:void 0},getScripts:()=>["moment.js"],getStyles:()=>["MMM-Google-Driving-Time.css"],getTranslations:()=>({en:"translations/en.json",de:"translations/de.json"}),getTemplate:()=>"templates/MMM-Google-Driving-Time.njk",getTemplateData(){var t,e;return{config:this.config,lastUpdate:moment(null===(t=this.state)||void 0===t?void 0:t.lastUpdate).format(this.config.lastUpdateFormat),drivingTime:null===(e=this.state)||void 0===e?void 0:e.drivingTime}},start(){this.loadData(),this.scheduleUpdate(),this.updateDom()},scheduleUpdate(){this.config.updateIntervalInSeconds=this.config.updateIntervalInSeconds<120?120:this.config.updateIntervalInSeconds,setInterval((()=>{this.loadData()}),1e3*this.config.updateIntervalInSeconds)},loadData(){this.sendSocketNotification(i.JAST_STOCKS_REQUEST,this.config)},socketNotificationReceived(t,e){t===i.JAST_STOCKS_RESPONSE&&(this.state=e,n.log(i.JAST_STOCKS_RESPONSE,this.state),this.updateDom())}})}(Log);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
